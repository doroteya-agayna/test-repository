#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the ContextGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using ContextApi.Model;

namespace ContextApi.Model	
{
	public partial class EntitiesModel : OpenAccessContext, IEntitiesModelUnitOfWork
	{
		private static string connectionStringName = @"ProjectManagementConnection";
			
		private static BackendConfiguration backend = GetBackendConfiguration();
				
		private static MetadataSource metadataSource = new EntitiesModelFluentMetadataSource();
		
		public EntitiesModel()
			:base(connectionStringName, backend, metadataSource)
        { /*var conf = this.Metadata.PersistentTypes.First(pt => pt.Name.Contains("MonthlyReport"));*/ }
		
		public EntitiesModel(string connection)
			:base(connection, backend, metadataSource)
		{ }
		
		public EntitiesModel(BackendConfiguration backendConfiguration)
			:base(connectionStringName, backendConfiguration, metadataSource)
		{ }
			
		public EntitiesModel(string connection, MetadataSource metadataSource)
			:base(connection, backend, metadataSource)
		{ }
		
		public EntitiesModel(string connection, BackendConfiguration backendConfiguration, MetadataSource metadataSource)
			:base(connection, backendConfiguration, metadataSource)
		{ }
			
		public IQueryable<Task> Tasks 
		{
			get
			{
				return this.GetAll<Task>();
			}
		}
		
		public IQueryable<TaskAssignment> TaskAssignments 
		{
			get
			{
				return this.GetAll<TaskAssignment>();
			}
		}
		
		public IQueryable<Project> Projects 
		{
			get
			{
				return this.GetAll<Project>();
			}
		}
		
		public IQueryable<Employee> Employees 
		{
			get
			{
				return this.GetAll<Employee>();
			}
		}
		
		public IQueryable<DocumentMetadata> DocumentMetadatum 
		{
			get
			{
				return this.GetAll<DocumentMetadata>();
			}
		}
		
		public IQueryable<Document> Documents 
		{
			get
			{
				return this.GetAll<Document>();
			}
		}
		
		public IQueryable<Manager> Managers 
		{
			get
			{
				return this.GetAll<Manager>();
			}
		}
		
		public IQueryable<Report> Reports1 
		{
			get
			{
				return this.GetAll<Report>();
			}
		}
		
		public IQueryable<MonthlyReport> MonthlyReports 
		{
			get
			{
				return this.GetAll<MonthlyReport>();
			}
		}
		
		public IQueryable<DailyReport> DailyReports 
		{
			get
			{
				return this.GetAll<DailyReport>();
			}
		}
		
		public IQueryable<NewItem> NewItems 
		{
			get
			{
				return this.GetAll<NewItem>();
			}
		}
		
		public IQueryable<Bug> Bugs 
		{
			get
			{
				return this.GetAll<Bug>();
			}
		}
		
		public static BackendConfiguration GetBackendConfiguration()
		{
			BackendConfiguration backend = new BackendConfiguration();
			backend.Backend = "MsSql";
			backend.ProviderName = "System.Data.SqlClient";
			backend.Logging.MetricStoreSnapshotInterval = 0;

			CustomizeBackendConfiguration(ref backend);
		
			return backend;
		}
		
		/// <summary>
		/// Allows you to customize the BackendConfiguration of EntitiesModel.
		/// </summary>
		/// <param name="config">The BackendConfiguration of EntitiesModel.</param>
		static partial void CustomizeBackendConfiguration(ref BackendConfiguration config);
		
	}
	
	public interface IEntitiesModelUnitOfWork : IUnitOfWork
	{
		IQueryable<Task> Tasks
		{
			get;
		}
		IQueryable<TaskAssignment> TaskAssignments
		{
			get;
		}
		IQueryable<Project> Projects
		{
			get;
		}
		IQueryable<Employee> Employees
		{
			get;
		}
		IQueryable<DocumentMetadata> DocumentMetadatum
		{
			get;
		}
		IQueryable<Document> Documents
		{
			get;
		}
		IQueryable<Manager> Managers
		{
			get;
		}
		IQueryable<Report> Reports1
		{
			get;
		}
		IQueryable<MonthlyReport> MonthlyReports
		{
			get;
		}
		IQueryable<DailyReport> DailyReports
		{
			get;
		}
		IQueryable<NewItem> NewItems
		{
			get;
		}
		IQueryable<Bug> Bugs
		{
			get;
		}
	}
}
#pragma warning restore 1591
