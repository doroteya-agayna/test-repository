'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by the FluentMappingGenerator.ttinclude code generation file.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------
Imports System
Imports System.Data
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Data.Common
Imports System.Collections.Generic
Imports Telerik.OpenAccess
Imports Telerik.OpenAccess.Metadata
Imports Telerik.OpenAccess.Data.Common
Imports Telerik.OpenAccess.Metadata.Fluent
Imports Telerik.OpenAccess.Metadata.Fluent.Advanced
Imports ContextApi.Model
Imports Telerik.OpenAccess.Metadata.Relational


Namespace ContextApi.Model	

		Public Partial Class EntitiesModelFluentMetadataSource 
		Inherits FluentMetadataSource
	
		Protected Overrides Function PrepareMapping() As IList(Of MappingConfiguration)
			Dim mappingConfigurations As New List(Of MappingConfiguration)()
			Dim taskConfiguration As MappingConfiguration(Of Task) = Me.GetTaskMappingConfiguration()
			mappingConfigurations.Add(taskConfiguration)
			
			Dim taskassignmentConfiguration As MappingConfiguration(Of TaskAssignment) = Me.GetTaskAssignmentMappingConfiguration()
			mappingConfigurations.Add(taskassignmentConfiguration)
			
			Dim projectConfiguration As MappingConfiguration(Of Project) = Me.GetProjectMappingConfiguration()
			mappingConfigurations.Add(projectConfiguration)
			
			Dim employeeConfiguration As MappingConfiguration(Of Employee) = Me.GetEmployeeMappingConfiguration()
			mappingConfigurations.Add(employeeConfiguration)
			
			Dim documentmetadataConfiguration As MappingConfiguration(Of DocumentMetadata) = Me.GetDocumentMetadataMappingConfiguration()
			mappingConfigurations.Add(documentmetadataConfiguration)
			
			Dim documentConfiguration As MappingConfiguration(Of Document) = Me.GetDocumentMappingConfiguration()
			mappingConfigurations.Add(documentConfiguration)
			
			Dim managerConfiguration As MappingConfiguration(Of Manager) = Me.GetManagerMappingConfiguration()
			mappingConfigurations.Add(managerConfiguration)
			
			Dim reportConfiguration As MappingConfiguration(Of Report) = Me.GetReportMappingConfiguration()
			mappingConfigurations.Add(reportConfiguration)
			
			Dim monthlyreportConfiguration As MappingConfiguration(Of MonthlyReport) = Me.GetMonthlyReportMappingConfiguration()
			mappingConfigurations.Add(monthlyreportConfiguration)
			
			Dim dailyreportConfiguration As MappingConfiguration(Of DailyReport) = Me.GetDailyReportMappingConfiguration()
			mappingConfigurations.Add(dailyreportConfiguration)
			
			Dim newitemConfiguration As MappingConfiguration(Of NewItem) = Me.GetNewItemMappingConfiguration()
			mappingConfigurations.Add(newitemConfiguration)
			
			Dim bugConfiguration As MappingConfiguration(Of Bug) = Me.GetBugMappingConfiguration()
			mappingConfigurations.Add(bugConfiguration)
			
			Return mappingConfigurations
			
		End Function
		
		Protected Overrides Sub SetContainerSettings(container As MetadataContainer)		
			container.Name = "EntitiesModel"
			container.DefaultNamespace = "ContextApi.Model"
			container.NameGenerator.RemoveLeadingUnderscores = false
			container.NameGenerator.SourceStrategy = Telerik.OpenAccess.Metadata.NamingSourceStrategy.Property
			container.NameGenerator.RemoveCamelCase = false
		End Sub
		Public Function GetTaskMappingConfiguration() As MappingConfiguration(Of Task)
			Dim configuration As MappingConfiguration(Of Task) = Me.GetTaskClassConfiguration()
			Me.PrepareTaskPropertyConfigurations(configuration)
			Me.PrepareTaskAssociationConfigurations(configuration)

			Return configuration
		
		End Function

		Public Function GetTaskClassConfiguration() As MappingConfiguration(Of Task)
			Dim configuration As New MappingConfiguration(Of Task)()
			configuration.MapType(Function(x) New With {x}).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).Inheritance(InheritanceStrategy.Default).ToTable("Tasks")
		
			Return configuration
		
		End Function
	
		Public Sub PrepareTaskPropertyConfigurations(configuration As MappingConfiguration(Of Task))
			configuration.HasProperty(Function(x) x.Title).HasFieldName("_title").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TaskTitle").IsNullable().HasColumnType("nchar").HasLength(20)
			configuration.HasProperty(Function(x) x.TaskId).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_taskId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TaskId").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0)
			configuration.HasProperty(Function(x) x.ProjectId).HasFieldName("_projectId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ProjectId").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0)
			configuration.HasProperty(Function(x) x.Status).HasFieldName("_status").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Status").IsNullable().HasColumnType("varchar").HasLength(50)
			configuration.HasProperty(Function(x) x.Priority).HasFieldName("_priority").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Priority").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0)
			configuration.HasProperty(Function(x) x.PercentCompleted).HasFieldName("_percentCompleted").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("PercentCompleted").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0)
		
		End Sub
	
		Public Sub PrepareTaskAssociationConfigurations(configuration As MappingConfiguration(Of Task))
		configuration.HasAssociation(Function(x) x.Project).HasFieldName("_project").WithOpposite(Function(x) x.Tasks).ToColumn("ProjectId").HasConstraint(Function(x, y)  x.ProjectId = y.ProjectId ).IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite)
		configuration.HasAssociation(Of TaskAssignment)(Function(x) x.TaskAssignments).HasFieldName("_taskAssignments").WithOpposite(Function(x) x.Task).ToColumn("TaskId").HasConstraint(Function(y, x)  x.TaskId = y.TaskId ).IsDependent().WithDataAccessKind(DataAccessKind.ReadWrite)
		
		End Sub
		
		Public Function GetTaskAssignmentMappingConfiguration() As MappingConfiguration(Of TaskAssignment)
			Dim configuration As MappingConfiguration(Of TaskAssignment) = Me.GetTaskAssignmentClassConfiguration()
			Me.PrepareTaskAssignmentPropertyConfigurations(configuration)
			Me.PrepareTaskAssignmentAssociationConfigurations(configuration)

			Return configuration
		
		End Function

		Public Function GetTaskAssignmentClassConfiguration() As MappingConfiguration(Of TaskAssignment)
			Dim configuration As New MappingConfiguration(Of TaskAssignment)()
			configuration.MapType(Function(x) New With {x}).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("TaskAssignments")
		
			Return configuration
		
		End Function
	
		Public Sub PrepareTaskAssignmentPropertyConfigurations(configuration As MappingConfiguration(Of TaskAssignment))
			configuration.HasProperty(Function(x) x.TaskAssignmentId).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_taskAssignmentId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TaskAssignmentId").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0)
			configuration.HasProperty(Function(x) x.TaskId).HasFieldName("_taskId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TaskId").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0)
			configuration.HasProperty(Function(x) x.EmployeeId).HasFieldName("_employeeId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("EmployeeId").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0)
			configuration.HasProperty(Function(x) x.WorkingHours).HasFieldName("_workingHours").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("WorkingHours").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0)
		
		End Sub
	
		Public Sub PrepareTaskAssignmentAssociationConfigurations(configuration As MappingConfiguration(Of TaskAssignment))
		configuration.HasAssociation(Function(x) x.Employee).HasFieldName("_employee").WithOpposite(Function(x) x.TaskAssignments).ToColumn("EmployeeId").HasConstraint(Function(x, y)  x.EmployeeId = y.EmployeeId ).WithDataAccessKind(DataAccessKind.ReadWrite)
		configuration.HasAssociation(Function(x) x.Task).HasFieldName("_task").WithOpposite(Function(x) x.TaskAssignments).ToColumn("TaskId").HasConstraint(Function(x, y)  x.TaskId = y.TaskId ).IsDependent().IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite)
		
		End Sub
		
		Public Function GetProjectMappingConfiguration() As MappingConfiguration(Of Project)
			Dim configuration As MappingConfiguration(Of Project) = Me.GetProjectClassConfiguration()
			Me.PrepareProjectPropertyConfigurations(configuration)
			Me.PrepareProjectAssociationConfigurations(configuration)

			Return configuration
		
		End Function

		Public Function GetProjectClassConfiguration() As MappingConfiguration(Of Project)
			Dim configuration As New MappingConfiguration(Of Project)()
			configuration.MapType(Function(x) New With {x}).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("Projects")
		
			Return configuration
		
		End Function
	
		Public Sub PrepareProjectPropertyConfigurations(configuration As MappingConfiguration(Of Project))
			configuration.HasProperty(Function(x) x.Title).HasFieldName("_title").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Title").IsNotNullable().HasColumnType("varchar").HasLength(50)
			configuration.HasProperty(Function(x) x.EmployeeId).HasFieldName("_employeeId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("EmployeeId").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0)
			configuration.HasProperty(Function(x) x.ProjectId).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_projectId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ProjectId").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0)
			configuration.HasProperty(Function(x) x.Manager).HasFieldName("_manager").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Manager").IsNullable().HasColumnType("varchar").HasLength(255)
			configuration.HasProperty(Function(x) x.StartDate).HasFieldName("_startDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("StartDate").IsNotNullable().HasColumnType("datetime")
			configuration.HasProperty(Function(x) x.EndDate).HasFieldName("_endDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("EndDate").IsNullable().HasColumnType("datetime")
			configuration.HasProperty(Function(x) x.Budget).HasFieldName("_budget").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Budget").IsNullable().HasColumnType("decimal").HasPrecision(18).HasScale(0)
			configuration.HasProperty(Function(x) x.Priority).HasFieldName("_priority").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Priority").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0)
		
		End Sub
	
		Public Sub PrepareProjectAssociationConfigurations(configuration As MappingConfiguration(Of Project))
		configuration.HasAssociation(Of DocumentMetadata)(Function(x) x.DocumentMetadatum).HasFieldName("_documentMetadata").WithOpposite(Function(x) x.Projects).WithDataAccessKind(DataAccessKind.ReadWrite).MapJoinTable("ProjectDocumentMetadataJoin", Function(x, y) New With {.ProjectId = x.ProjectId, .DocumentMetadataId = y.DocumentMetadataId}).CreatePrimaryKeyFromForeignKeys()
		configuration.HasAssociation(Of Employee)(Function(x) x.Employees).HasFieldName("_employees").WithOpposite(Function(x) x.Projects).IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite).MapJoinTable("ProjectEmployeeJoin", Function(x, y) New With {.EmployeeId = x.ProjectId, .ProjectId = y.EmployeeId}).CreatePrimaryKeyFromForeignKeys()
		configuration.HasAssociation(Of Task)(Function(x) x.Tasks).HasFieldName("_tasks").WithOpposite(Function(x) x.Project).ToColumn("ProjectId").HasConstraint(Function(y, x)  x.ProjectId = y.ProjectId ).WithDataAccessKind(DataAccessKind.ReadWrite)
		
		End Sub
		
		Public Function GetEmployeeMappingConfiguration() As MappingConfiguration(Of Employee)
			Dim configuration As MappingConfiguration(Of Employee) = Me.GetEmployeeClassConfiguration()
			Me.PrepareEmployeePropertyConfigurations(configuration)
			Me.PrepareEmployeeAssociationConfigurations(configuration)

			Return configuration
		
		End Function

		Public Function GetEmployeeClassConfiguration() As MappingConfiguration(Of Employee)
			Dim configuration As New MappingConfiguration(Of Employee)()
			configuration.MapType(Function(x) New With {x}).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).Inheritance(InheritanceStrategy.Default).ToTable("Employees")
		
			Return configuration
		
		End Function
	
		Public Sub PrepareEmployeePropertyConfigurations(configuration As MappingConfiguration(Of Employee))
			configuration.HasProperty(Function(x) x.Title).HasFieldName("_title").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Title").IsNullable().HasColumnType("nchar").HasLength(20)
			configuration.HasProperty(Function(x) x.ProjectId).HasFieldName("_projectId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ProjectId").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0)
			configuration.HasProperty(Function(x) x.LastName).HasFieldName("_lastName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LastName").IsNotNullable().HasColumnType("varchar").HasLength(50)
			configuration.HasProperty(Function(x) x.FirstName).HasFieldName("_firstName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("FirstName").IsNullable().HasColumnType("varchar").HasLength(50)
			configuration.HasProperty(Function(x) x.EmployeeId).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_employeeId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("EmployeeId").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0)
			configuration.HasProperty(Function(x) x.ReportToId).HasFieldName("_reportToId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ReportToId").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0)
			configuration.HasProperty(Function(x) x.Department).HasFieldName("_department").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Department").IsNullable().HasColumnType("varchar").HasLength(255)
			configuration.HasProperty(Function(x) x.Addres).HasFieldName("_addres").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Addres").IsNullable().HasColumnType("varchar").HasLength(255)
		
		End Sub
	
		Public Sub PrepareEmployeeAssociationConfigurations(configuration As MappingConfiguration(Of Employee))
		configuration.HasAssociation(Function(x) x.Supervisor).HasFieldName("_employee1").WithOpposite(Function(x) x.Employees).ToColumn("ReportToId").HasConstraint(Function(x, y)  x.ReportToId = y.EmployeeId ).IsManaged().IsDependent().WithDataAccessKind(DataAccessKind.ReadWrite)
		configuration.HasAssociation(Of TaskAssignment)(Function(x) x.TaskAssignments).HasFieldName("_taskAssignments").WithOpposite(Function(x) x.Employee).ToColumn("EmployeeId").HasConstraint(Function(y, x)  x.EmployeeId = y.EmployeeId ).WithDataAccessKind(DataAccessKind.ReadWrite)
		configuration.HasAssociation(Of Employee)(Function(x) x.Employees).HasFieldName("_employees1").WithOpposite(Function(x) x.Supervisor).ToColumn("ReportToId").HasConstraint(Function(y, x)  x.ReportToId = y.EmployeeId ).IsManaged().IsDependent().WithDataAccessKind(DataAccessKind.ReadWrite)
		configuration.HasAssociation(Of MonthlyReport)(Function(x) x.MonthlyReports).HasFieldName("_monthlyReports").WithOpposite(Function(x) x.Employee).WithDataAccessKind(DataAccessKind.ReadWrite)
		configuration.HasAssociation(Of DailyReport)(Function(x) x.DailyReports).HasFieldName("_dailyReports").WithOpposite(Function(x) x.Employee).IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite)
		configuration.HasAssociation(Of Project)(Function(x) x.Projects).HasFieldName("_projects").WithOpposite(Function(x) x.Employees).IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite)
		
		End Sub
		
		Public Function GetDocumentMetadataMappingConfiguration() As MappingConfiguration(Of DocumentMetadata)
			Dim configuration As MappingConfiguration(Of DocumentMetadata) = Me.GetDocumentMetadataClassConfiguration()
			Me.PrepareDocumentMetadataPropertyConfigurations(configuration)
			Me.PrepareDocumentMetadataAssociationConfigurations(configuration)

			Return configuration
		
		End Function

		Public Function GetDocumentMetadataClassConfiguration() As MappingConfiguration(Of DocumentMetadata)
			Dim configuration As New MappingConfiguration(Of DocumentMetadata)()
			configuration.MapType(Function(x) New With {x}).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("DocumentMetadata")
		
			Return configuration
		
		End Function
	
		Public Sub PrepareDocumentMetadataPropertyConfigurations(configuration As MappingConfiguration(Of DocumentMetadata))
			configuration.HasProperty(Function(x) x.Title).HasFieldName("_title").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Title").IsNotNullable().HasColumnType("varchar").HasLength(50)
			configuration.HasProperty(Function(x) x.LastModified).HasFieldName("_lastModified").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LastModified").IsNullable().HasColumnType("varchar").HasLength(255)
			configuration.HasProperty(Function(x) x.DocumentMetadataId).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_documentMetadataId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DocumentMetadataId").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0)
			configuration.HasProperty(Function(x) x.Created).HasFieldName("_created").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Created").IsNullable().HasColumnType("datetime")
			configuration.HasProperty(Function(x) x.Author).HasFieldName("_author").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Author").IsNullable().HasColumnType("varchar").HasLength(50)
			configuration.HasProperty(Function(x) x.Category).HasFieldName("_category").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Category").IsNullable().HasColumnType("varchar").HasLength(50)
			configuration.HasProperty(Function(x) x.Size).HasFieldName("_size").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Size").IsNullable().HasColumnType("real").HasPrecision(0).HasScale(0)
			configuration.HasProperty(Function(x) x.Tag).HasFieldName("_tag").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Tag").IsNullable().HasColumnType("varchar").HasLength(255)
		
		End Sub
	
		Public Sub PrepareDocumentMetadataAssociationConfigurations(configuration As MappingConfiguration(Of DocumentMetadata))
		configuration.HasAssociation(Of Project)(Function(x) x.Projects).HasFieldName("_projects").WithOpposite(Function(x) x.DocumentMetadatum).WithDataAccessKind(DataAccessKind.ReadWrite)
		configuration.HasAssociation(Function(x) x.Document).HasFieldName("_document").WithOpposite(Function(x) x.DocumentMetadatum).ToColumn("DocumentId").HasConstraint(Function(y, x)  x.DocumentId = y.DocumentMetadataId ).IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite)
		
		End Sub
		
		Public Function GetDocumentMappingConfiguration() As MappingConfiguration(Of Document)
			Dim configuration As MappingConfiguration(Of Document) = Me.GetDocumentClassConfiguration()
			Me.PrepareDocumentPropertyConfigurations(configuration)
			Me.PrepareDocumentAssociationConfigurations(configuration)

			Return configuration
		
		End Function

		Public Function GetDocumentClassConfiguration() As MappingConfiguration(Of Document)
			Dim configuration As New MappingConfiguration(Of Document)()
			configuration.MapType(Function(x) New With {x}).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Version).ToTable("Document")
		
			Return configuration
		
		End Function
	
		Public Sub PrepareDocumentPropertyConfigurations(configuration As MappingConfiguration(Of Document))
			configuration.HasProperty(Function(x) x.DocumentId).IsIdentity().HasFieldName("_documentId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DocumentId").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0)
			configuration.HasProperty(Function(x) x.Data).HasFieldName("_data").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Data").IsNullable().HasColumnType("binary")
			configuration.HasProperty(Function(x) x.Checksum).HasFieldName("_checksum").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Checksum").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0)
			configuration.HasProperty(Function(x) x.ConcurencyVersion).HasFieldName("_concurencyVersion").IsVersion().ToColumn("ConcurencyVersion").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0)
		
		End Sub
	
		Public Sub PrepareDocumentAssociationConfigurations(configuration As MappingConfiguration(Of Document))
		configuration.HasAssociation(Function(x) x.DocumentMetadatum).HasFieldName("_documentMetadatum").WithOpposite(Function(x) x.Document).ToColumn("DocumentId").HasConstraint(Function(x, y)  x.DocumentId = y.DocumentMetadataId ).IsManaged().IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite)
		
		End Sub
		
		Public Function GetManagerMappingConfiguration() As MappingConfiguration(Of Manager)
			Dim configuration As MappingConfiguration(Of Manager) = Me.GetManagerClassConfiguration()
			Me.PrepareManagerPropertyConfigurations(configuration)

			Return configuration
		
		End Function

		Public Function GetManagerClassConfiguration() As MappingConfiguration(Of Manager)
			Dim configuration As New MappingConfiguration(Of Manager)()
			configuration.MapType(Function(x) New With {x}).Inheritance(InheritanceStrategy.Flat).ToTable("Employees")
		
			Return configuration
		
		End Function
	
		Public Sub PrepareManagerPropertyConfigurations(configuration As MappingConfiguration(Of Manager))
			configuration.HasProperty(Function(x) x.ManagedDepartment).HasFieldName("_managedDepartment").ToColumn("ManagedDepartment").IsNullable().HasColumnType("varchar").HasLength(0)
		
		End Sub
		Public Function GetReportMappingConfiguration() As MappingConfiguration(Of Report)
			Dim configuration As MappingConfiguration(Of Report) = Me.GetReportClassConfiguration()
			Me.PrepareReportPropertyConfigurations(configuration)

			Return configuration
		
		End Function

		Public Function GetReportClassConfiguration() As MappingConfiguration(Of Report)
			Dim configuration As New MappingConfiguration(Of Report)()
			configuration.MapType(Function(x) New With {x}).Inheritance(InheritanceStrategy.Horizontal)
		
			Return configuration
		
		End Function
	
		Public Sub PrepareReportPropertyConfigurations(configuration As MappingConfiguration(Of Report))
			configuration.HasProperty(Function(x) x.ReportId).IsIdentity().HasFieldName("_reportId")
			configuration.HasProperty(Function(x) x.Title).HasFieldName("_title")
            ''configuration.HasProperty(Function(x) x.EmployeeId).HasFieldName("_employeeId")
			configuration.HasProperty(Function(x) x.Context).HasFieldName("_context")
		
		End Sub
		Public Function GetMonthlyReportMappingConfiguration() As MappingConfiguration(Of MonthlyReport)
			Dim configuration As MappingConfiguration(Of MonthlyReport) = Me.GetMonthlyReportClassConfiguration()
			Me.PrepareMonthlyReportPropertyConfigurations(configuration)
			Me.PrepareMonthlyReportAssociationConfigurations(configuration)

			Return configuration
		
		End Function

		Public Function GetMonthlyReportClassConfiguration() As MappingConfiguration(Of MonthlyReport)
			Dim configuration As New MappingConfiguration(Of MonthlyReport)()
            configuration.MapType(Function(x) New With {x}).Inheritance(InheritanceStrategy.Default)
            configuration.HasDiscriminatorValue("ContextApi.Model.MonthlyReport")
		
			Return configuration
		
		End Function
	
		Public Sub PrepareMonthlyReportPropertyConfigurations(configuration As MappingConfiguration(Of MonthlyReport))
			configuration.HasProperty(Function(x) x.MonthlyReportId).IsIdentity().HasFieldName("_monthlyReportId")
			configuration.HasProperty(Function(x) x.Month).HasFieldName("_month")
			configuration.HasProperty(Function(x) x.ReportId).IsIdentity().HasFieldName("Report._reportId")
			configuration.HasProperty(Function(x) x.Title).HasFieldName("Report._title")
			configuration.HasProperty(Function(x) x.EmployeeId).HasFieldName("Report._employeeId")
			configuration.HasProperty(Function(x) x.Context).HasFieldName("Report._context")
		
		End Sub
	
		Public Sub PrepareMonthlyReportAssociationConfigurations(configuration As MappingConfiguration(Of MonthlyReport))
		configuration.HasAssociation(Function(x) x.Employee).HasFieldName("_employee").WithOpposite(Function(x) x.MonthlyReports).WithDataAccessKind(DataAccessKind.ReadWrite)
		
		End Sub
		
		Public Function GetDailyReportMappingConfiguration() As MappingConfiguration(Of DailyReport)
			Dim configuration As MappingConfiguration(Of DailyReport) = Me.GetDailyReportClassConfiguration()
			Me.PrepareDailyReportPropertyConfigurations(configuration)
			Me.PrepareDailyReportAssociationConfigurations(configuration)

			Return configuration
		
		End Function

		Public Function GetDailyReportClassConfiguration() As MappingConfiguration(Of DailyReport)
			Dim configuration As New MappingConfiguration(Of DailyReport)()
            configuration.MapType(Function(x) New With {x}).Inheritance(InheritanceStrategy.Default)
            configuration.HasDiscriminatorValue("ContextApi.Model.DailyReport")
		
			Return configuration
		
		End Function
	
		Public Sub PrepareDailyReportPropertyConfigurations(configuration As MappingConfiguration(Of DailyReport))
			configuration.HasProperty(Function(x) x.DailyReportId).IsIdentity().HasFieldName("_dailyReportId")
			configuration.HasProperty(Function(x) x.StartTime).HasFieldName("_startTime")
			configuration.HasProperty(Function(x) x.EndTime).HasFieldName("_endTime")
			configuration.HasProperty(Function(x) x.ReportId).IsIdentity().HasFieldName("Report._reportId")
			configuration.HasProperty(Function(x) x.Title).HasFieldName("Report._title")
			configuration.HasProperty(Function(x) x.EmployeeId).HasFieldName("Report._employeeId")
			configuration.HasProperty(Function(x) x.Context).HasFieldName("Report._context")
		
		End Sub
	
		Public Sub PrepareDailyReportAssociationConfigurations(configuration As MappingConfiguration(Of DailyReport))
		configuration.HasAssociation(Function(x) x.Employee).HasFieldName("_employee").WithOpposite(Function(x) x.DailyReports).IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite)
		
		End Sub
		
		Public Function GetNewItemMappingConfiguration() As MappingConfiguration(Of NewItem)
			Dim configuration As MappingConfiguration(Of NewItem) = Me.GetNewItemClassConfiguration()
			Me.PrepareNewItemPropertyConfigurations(configuration)

			Return configuration
		
		End Function

		Public Function GetNewItemClassConfiguration() As MappingConfiguration(Of NewItem)
			Dim configuration As New MappingConfiguration(Of NewItem)()
            configuration.MapType(Function(x) New With {x}).Inheritance(InheritanceStrategy.Vertical)
            configuration.HasDiscriminatorValue("ContextApi.Model.NewItem")
		
			Return configuration
		
		End Function
	
		Public Sub PrepareNewItemPropertyConfigurations(configuration As MappingConfiguration(Of NewItem))
			configuration.HasProperty(Function(x) x.StartTime).HasFieldName("_startTime")
			configuration.HasProperty(Function(x) x.ReadyFor).HasFieldName("_readyFor")
		
		End Sub
		Public Function GetBugMappingConfiguration() As MappingConfiguration(Of Bug)
			Dim configuration As MappingConfiguration(Of Bug) = Me.GetBugClassConfiguration()
			Me.PrepareBugPropertyConfigurations(configuration)

			Return configuration
		
		End Function

		Public Function GetBugClassConfiguration() As MappingConfiguration(Of Bug)
			Dim configuration As New MappingConfiguration(Of Bug)()
            configuration.MapType(Function(x) New With {x}).Inheritance(InheritanceStrategy.Vertical)
            configuration.HasDiscriminatorValue("ContextApi.Model.Bug")
		
			Return configuration
		
		End Function
	
		Public Sub PrepareBugPropertyConfigurations(configuration As MappingConfiguration(Of Bug))
			configuration.HasProperty(Function(x) x.Impact).HasFieldName("_impact")
			configuration.HasProperty(Function(x) x.Regression).HasFieldName("_regression")
		
		End Sub
	
	End Class
End Namespace

