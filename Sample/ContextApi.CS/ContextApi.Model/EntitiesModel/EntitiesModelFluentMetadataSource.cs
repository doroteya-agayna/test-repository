#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the FluentMappingGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using ContextApi.Model;
using Telerik.OpenAccess.Metadata.Relational;

namespace ContextApi.Model
{

	public partial class EntitiesModelFluentMetadataSource : FluentMetadataSource
	{
		
		protected override IList<MappingConfiguration> PrepareMapping()
		{
			List<MappingConfiguration> mappingConfigurations = new List<MappingConfiguration>();
			
			MappingConfiguration<Task> taskConfiguration = this.GetTaskMappingConfiguration();
			mappingConfigurations.Add(taskConfiguration);
			
			MappingConfiguration<TaskAssignment> taskassignmentConfiguration = this.GetTaskAssignmentMappingConfiguration();
			mappingConfigurations.Add(taskassignmentConfiguration);
			
			MappingConfiguration<Project> projectConfiguration = this.GetProjectMappingConfiguration();
			mappingConfigurations.Add(projectConfiguration);
			
			MappingConfiguration<Employee> employeeConfiguration = this.GetEmployeeMappingConfiguration();
			mappingConfigurations.Add(employeeConfiguration);
			
			MappingConfiguration<DocumentMetadata> documentmetadataConfiguration = this.GetDocumentMetadataMappingConfiguration();
			mappingConfigurations.Add(documentmetadataConfiguration);
			
			MappingConfiguration<Document> documentConfiguration = this.GetDocumentMappingConfiguration();
			mappingConfigurations.Add(documentConfiguration);
			
			MappingConfiguration<Manager> managerConfiguration = this.GetManagerMappingConfiguration();
			mappingConfigurations.Add(managerConfiguration);
			
			MappingConfiguration<Report> reportConfiguration = this.GetReportMappingConfiguration();
			mappingConfigurations.Add(reportConfiguration);
			
			MappingConfiguration<MonthlyReport> monthlyreportConfiguration = this.GetMonthlyReportMappingConfiguration();
			mappingConfigurations.Add(monthlyreportConfiguration);
			
			MappingConfiguration<DailyReport> dailyreportConfiguration = this.GetDailyReportMappingConfiguration();
			mappingConfigurations.Add(dailyreportConfiguration);
			
			MappingConfiguration<NewItem> newitemConfiguration = this.GetNewItemMappingConfiguration();
			mappingConfigurations.Add(newitemConfiguration);
			
			MappingConfiguration<Bug> bugConfiguration = this.GetBugMappingConfiguration();
			mappingConfigurations.Add(bugConfiguration);
			
			return mappingConfigurations;
		}
		
		protected override void SetContainerSettings(MetadataContainer container)
		{
			container.Name = "EntitiesModel";
			container.DefaultNamespace = "ContextApi.Model";
			container.NameGenerator.RemoveLeadingUnderscores = false;
			container.NameGenerator.SourceStrategy = Telerik.OpenAccess.Metadata.NamingSourceStrategy.Property;
			container.NameGenerator.RemoveCamelCase = false;
		}
		public MappingConfiguration<Task> GetTaskMappingConfiguration()
		{
			MappingConfiguration<Task> configuration = this.GetTaskClassConfiguration();
			this.PrepareTaskPropertyConfigurations(configuration);
			this.PrepareTaskAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<Task> GetTaskClassConfiguration()
		{
			MappingConfiguration<Task> configuration = new MappingConfiguration<Task>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).Inheritance(InheritanceStrategy.Default).ToTable("Tasks");
	
			return configuration;
		}
	
		public void PrepareTaskPropertyConfigurations(MappingConfiguration<Task> configuration)
		{
			configuration.HasProperty(x => x.Title).HasFieldName("_title").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TaskTitle").IsNullable().HasColumnType("nchar").HasLength(20);
			configuration.HasProperty(x => x.TaskId).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_taskId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TaskId").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ProjectId).HasFieldName("_projectId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ProjectId").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Status).HasFieldName("_status").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Status").IsNullable().HasColumnType("varchar").HasLength(50);
			configuration.HasProperty(x => x.Priority).HasFieldName("_priority").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Priority").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.PercentCompleted).HasFieldName("_percentCompleted").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("PercentCompleted").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareTaskAssociationConfigurations(MappingConfiguration<Task> configuration)
		{
			configuration.HasAssociation(x => x.Project).HasFieldName("_project").WithOpposite(x => x.Tasks).ToColumn("ProjectId").HasConstraint((x, y) =>  x.ProjectId == y.ProjectId ).IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.TaskAssignments).HasFieldName("_taskAssignments").WithOpposite(x => x.Task).ToColumn("TaskId").HasConstraint((y, x) =>  x.TaskId == y.TaskId ).IsDependent().WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<TaskAssignment> GetTaskAssignmentMappingConfiguration()
		{
			MappingConfiguration<TaskAssignment> configuration = this.GetTaskAssignmentClassConfiguration();
			this.PrepareTaskAssignmentPropertyConfigurations(configuration);
			this.PrepareTaskAssignmentAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<TaskAssignment> GetTaskAssignmentClassConfiguration()
		{
			MappingConfiguration<TaskAssignment> configuration = new MappingConfiguration<TaskAssignment>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("TaskAssignments");
	
			return configuration;
		}
	
		public void PrepareTaskAssignmentPropertyConfigurations(MappingConfiguration<TaskAssignment> configuration)
		{
			configuration.HasProperty(x => x.TaskAssignmentId).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_taskAssignmentId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TaskAssignmentId").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TaskId).HasFieldName("_taskId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TaskId").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.EmployeeId).HasFieldName("_employeeId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("EmployeeId").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.WorkingHours).HasFieldName("_workingHours").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("WorkingHours").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareTaskAssignmentAssociationConfigurations(MappingConfiguration<TaskAssignment> configuration)
		{
			configuration.HasAssociation(x => x.Employee).HasFieldName("_employee").WithOpposite(x => x.TaskAssignments).ToColumn("EmployeeId").HasConstraint((x, y) =>  x.EmployeeId == y.EmployeeId ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.Task).HasFieldName("_task").WithOpposite(x => x.TaskAssignments).ToColumn("TaskId").HasConstraint((x, y) =>  x.TaskId == y.TaskId ).IsDependent().IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<Project> GetProjectMappingConfiguration()
		{
			MappingConfiguration<Project> configuration = this.GetProjectClassConfiguration();
			this.PrepareProjectPropertyConfigurations(configuration);
			this.PrepareProjectAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<Project> GetProjectClassConfiguration()
		{
			MappingConfiguration<Project> configuration = new MappingConfiguration<Project>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("Projects");
	
			return configuration;
		}
	
		public void PrepareProjectPropertyConfigurations(MappingConfiguration<Project> configuration)
		{
			configuration.HasProperty(x => x.Title).HasFieldName("_title").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Title").IsNotNullable().HasColumnType("varchar").HasLength(50);
			configuration.HasProperty(x => x.EmployeeId).HasFieldName("_employeeId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("EmployeeId").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ProjectId).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_projectId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ProjectId").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Manager).HasFieldName("_manager").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Manager").IsNullable().HasColumnType("varchar").HasLength(255);
			configuration.HasProperty(x => x.StartDate).HasFieldName("_startDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("StartDate").IsNotNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.EndDate).HasFieldName("_endDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("EndDate").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.Budget).HasFieldName("_budget").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Budget").IsNullable().HasColumnType("decimal").HasPrecision(18).HasScale(0);
			configuration.HasProperty(x => x.Priority).HasFieldName("_priority").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Priority").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareProjectAssociationConfigurations(MappingConfiguration<Project> configuration)
		{
			configuration.HasAssociation(x => x.DocumentMetadatum).HasFieldName("_documentMetadata").WithOpposite(x => x.Projects).WithDataAccessKind(DataAccessKind.ReadWrite).MapJoinTable("ProjectDocumentMetadataJoin", (x, y) => new{ProjectId = x.ProjectId, DocumentMetadataId = y.DocumentMetadataId}).CreatePrimaryKeyFromForeignKeys();
			configuration.HasAssociation(x => x.Employees).HasFieldName("_employees").WithOpposite(x => x.Projects).IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite).MapJoinTable("ProjectEmployeeJoin", (x, y) => new{EmployeeId = x.ProjectId, ProjectId = y.EmployeeId}).CreatePrimaryKeyFromForeignKeys();
			configuration.HasAssociation(x => x.Tasks).HasFieldName("_tasks").WithOpposite(x => x.Project).ToColumn("ProjectId").HasConstraint((y, x) =>  x.ProjectId == y.ProjectId ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<Employee> GetEmployeeMappingConfiguration()
		{
			MappingConfiguration<Employee> configuration = this.GetEmployeeClassConfiguration();
			this.PrepareEmployeePropertyConfigurations(configuration);
			this.PrepareEmployeeAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<Employee> GetEmployeeClassConfiguration()
		{
			MappingConfiguration<Employee> configuration = new MappingConfiguration<Employee>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).Inheritance(InheritanceStrategy.Default).ToTable("Employees");
	
			return configuration;
		}
	
		public void PrepareEmployeePropertyConfigurations(MappingConfiguration<Employee> configuration)
		{
			configuration.HasProperty(x => x.Title).HasFieldName("_title").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Title").IsNullable().HasColumnType("nchar").HasLength(20);
			configuration.HasProperty(x => x.ProjectId).HasFieldName("_projectId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ProjectId").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.LastName).HasFieldName("_lastName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LastName").IsNotNullable().HasColumnType("varchar").HasLength(50);
			configuration.HasProperty(x => x.FirstName).HasFieldName("_firstName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("FirstName").IsNullable().HasColumnType("varchar").HasLength(50);
			configuration.HasProperty(x => x.EmployeeId).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_employeeId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("EmployeeId").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ReportToId).HasFieldName("_reportToId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ReportToId").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Department).HasFieldName("_department").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Department").IsNullable().HasColumnType("varchar").HasLength(255);
			configuration.HasProperty(x => x.Addres).HasFieldName("_addres").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Addres").IsNullable().HasColumnType("varchar").HasLength(255);
		}
	
		public void PrepareEmployeeAssociationConfigurations(MappingConfiguration<Employee> configuration)
		{
			configuration.HasAssociation(x => x.Supervisor).HasFieldName("_employee1").WithOpposite(x => x.Employees).ToColumn("ReportToId").HasConstraint((x, y) =>  x.ReportToId == y.EmployeeId ).IsManaged().IsDependent().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.TaskAssignments).HasFieldName("_taskAssignments").WithOpposite(x => x.Employee).ToColumn("EmployeeId").HasConstraint((y, x) =>  x.EmployeeId == y.EmployeeId ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.Employees).HasFieldName("_employees1").WithOpposite(x => x.Supervisor).ToColumn("ReportToId").HasConstraint((y, x) =>  x.ReportToId == y.EmployeeId ).IsManaged().IsDependent().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.MonthlyReports).HasFieldName("_monthlyReports").WithOpposite(x => x.Employee).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.DailyReports).HasFieldName("_dailyReports").WithOpposite(x => x.Employee).IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.Projects).HasFieldName("_projects").WithOpposite(x => x.Employees).IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<DocumentMetadata> GetDocumentMetadataMappingConfiguration()
		{
			MappingConfiguration<DocumentMetadata> configuration = this.GetDocumentMetadataClassConfiguration();
			this.PrepareDocumentMetadataPropertyConfigurations(configuration);
			this.PrepareDocumentMetadataAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<DocumentMetadata> GetDocumentMetadataClassConfiguration()
		{
			MappingConfiguration<DocumentMetadata> configuration = new MappingConfiguration<DocumentMetadata>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("DocumentMetadata");
	
			return configuration;
		}
	
		public void PrepareDocumentMetadataPropertyConfigurations(MappingConfiguration<DocumentMetadata> configuration)
		{
			configuration.HasProperty(x => x.Title).HasFieldName("_title").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Title").IsNotNullable().HasColumnType("varchar").HasLength(50);
			configuration.HasProperty(x => x.LastModified).HasFieldName("_lastModified").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LastModified").IsNullable().HasColumnType("varchar").HasLength(255);
			configuration.HasProperty(x => x.DocumentMetadataId).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_documentMetadataId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DocumentMetadataId").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Created).HasFieldName("_created").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Created").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.Author).HasFieldName("_author").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Author").IsNullable().HasColumnType("varchar").HasLength(50);
			configuration.HasProperty(x => x.Category).HasFieldName("_category").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Category").IsNullable().HasColumnType("varchar").HasLength(50);
			configuration.HasProperty(x => x.Size).HasFieldName("_size").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Size").IsNullable().HasColumnType("real").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Tag).HasFieldName("_tag").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Tag").IsNullable().HasColumnType("varchar").HasLength(255);
		}
	
		public void PrepareDocumentMetadataAssociationConfigurations(MappingConfiguration<DocumentMetadata> configuration)
		{
			configuration.HasAssociation(x => x.Projects).HasFieldName("_projects").WithOpposite(x => x.DocumentMetadatum).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.Document).HasFieldName("_document").WithOpposite(x => x.DocumentMetadatum).ToColumn("DocumentId").HasConstraint((y, x) =>  x.DocumentId == y.DocumentMetadataId ).IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<Document> GetDocumentMappingConfiguration()
		{
			MappingConfiguration<Document> configuration = this.GetDocumentClassConfiguration();
			this.PrepareDocumentPropertyConfigurations(configuration);
			this.PrepareDocumentAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<Document> GetDocumentClassConfiguration()
		{
			MappingConfiguration<Document> configuration = new MappingConfiguration<Document>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Version).ToTable("Document");
	
			return configuration;
		}
	
		public void PrepareDocumentPropertyConfigurations(MappingConfiguration<Document> configuration)
		{
			configuration.HasProperty(x => x.DocumentId).IsIdentity().HasFieldName("_documentId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DocumentId").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Data).HasFieldName("_data").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Data").IsNullable().HasColumnType("binary");
			configuration.HasProperty(x => x.Checksum).HasFieldName("_checksum").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Checksum").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ConcurencyVersion).HasFieldName("_concurencyVersion").IsVersion().ToColumn("ConcurencyVersion").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareDocumentAssociationConfigurations(MappingConfiguration<Document> configuration)
		{
			configuration.HasAssociation(x => x.DocumentMetadatum).HasFieldName("_documentMetadatum").WithOpposite(x => x.Document).ToColumn("DocumentId").HasConstraint((x, y) =>  x.DocumentId == y.DocumentMetadataId ).IsManaged().IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<Manager> GetManagerMappingConfiguration()
		{
			MappingConfiguration<Manager> configuration = this.GetManagerClassConfiguration();
			this.PrepareManagerPropertyConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<Manager> GetManagerClassConfiguration()
		{
			MappingConfiguration<Manager> configuration = new MappingConfiguration<Manager>();
			configuration.MapType(x => new { }).Inheritance(InheritanceStrategy.Flat).ToTable("Employees");
	
			return configuration;
		}
	
		public void PrepareManagerPropertyConfigurations(MappingConfiguration<Manager> configuration)
		{
			configuration.HasProperty(x => x.ManagedDepartment).HasFieldName("_managedDepartment").ToColumn("ManagedDepartment").IsNullable().HasColumnType("varchar").HasLength(0);
		}
		public MappingConfiguration<Report> GetReportMappingConfiguration()
		{
			MappingConfiguration<Report> configuration = this.GetReportClassConfiguration();
			this.PrepareReportPropertyConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<Report> GetReportClassConfiguration()
		{
			MappingConfiguration<Report> configuration = new MappingConfiguration<Report>();
			configuration.MapType(x => new { }).Inheritance(InheritanceStrategy.Horizontal);
	
			return configuration;
		}
	
		public void PrepareReportPropertyConfigurations(MappingConfiguration<Report> configuration)
		{
			configuration.HasProperty(x => x.ReportId).IsIdentity().HasFieldName("_reportId");
			configuration.HasProperty(x => x.Title).HasFieldName("_title");
            //configuration.HasProperty(x => x.EmployeeId).HasFieldName("_employeeId");
			configuration.HasProperty(x => x.Context).HasFieldName("_context");
		}
		public MappingConfiguration<MonthlyReport> GetMonthlyReportMappingConfiguration()
		{
			MappingConfiguration<MonthlyReport> configuration = this.GetMonthlyReportClassConfiguration();
			this.PrepareMonthlyReportPropertyConfigurations(configuration);
			this.PrepareMonthlyReportAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<MonthlyReport> GetMonthlyReportClassConfiguration()
		{
			MappingConfiguration<MonthlyReport> configuration = new MappingConfiguration<MonthlyReport>();
            configuration.MapType(x => new { }).Inheritance(InheritanceStrategy.Default);
            configuration.HasDiscriminatorValue("ContextApi.Model.MonthlyReport");
	
			return configuration;
		}
	
		public void PrepareMonthlyReportPropertyConfigurations(MappingConfiguration<MonthlyReport> configuration)
		{
			configuration.HasProperty(x => x.MonthlyReportId).IsIdentity().HasFieldName("_monthlyReportId");
			configuration.HasProperty(x => x.Month).HasFieldName("_month");
			configuration.HasProperty(x => x.ReportId).IsIdentity().HasFieldName("Report._reportId");
			configuration.HasProperty(x => x.Title).HasFieldName("Report._title");
			configuration.HasProperty(x => x.EmployeeId).HasFieldName("Report._employeeId");
			configuration.HasProperty(x => x.Context).HasFieldName("Report._context");
		}
	
		public void PrepareMonthlyReportAssociationConfigurations(MappingConfiguration<MonthlyReport> configuration)
		{
			configuration.HasAssociation(x => x.Employee).HasFieldName("_employee").WithOpposite(x => x.MonthlyReports).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<DailyReport> GetDailyReportMappingConfiguration()
		{
			MappingConfiguration<DailyReport> configuration = this.GetDailyReportClassConfiguration();
			this.PrepareDailyReportPropertyConfigurations(configuration);
			this.PrepareDailyReportAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<DailyReport> GetDailyReportClassConfiguration()
		{
			MappingConfiguration<DailyReport> configuration = new MappingConfiguration<DailyReport>();
			configuration.MapType(x => new { }).Inheritance(InheritanceStrategy.Default);
	        configuration.HasDiscriminatorValue("ContextApi.Model.DailyReport");
			
            return configuration;
		}
	
		public void PrepareDailyReportPropertyConfigurations(MappingConfiguration<DailyReport> configuration)
		{
			configuration.HasProperty(x => x.DailyReportId).IsIdentity().HasFieldName("_dailyReportId");
			configuration.HasProperty(x => x.StartTime).HasFieldName("_startTime");
			configuration.HasProperty(x => x.EndTime).HasFieldName("_endTime");
			configuration.HasProperty(x => x.ReportId).IsIdentity().HasFieldName("Report._reportId");
			configuration.HasProperty(x => x.Title).HasFieldName("Report._title");
			configuration.HasProperty(x => x.EmployeeId).HasFieldName("Report._employeeId");
			configuration.HasProperty(x => x.Context).HasFieldName("Report._context");
		}
	
		public void PrepareDailyReportAssociationConfigurations(MappingConfiguration<DailyReport> configuration)
		{
			configuration.HasAssociation(x => x.Employee).HasFieldName("_employee").WithOpposite(x => x.DailyReports).IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<NewItem> GetNewItemMappingConfiguration()
		{
			MappingConfiguration<NewItem> configuration = this.GetNewItemClassConfiguration();
			this.PrepareNewItemPropertyConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<NewItem> GetNewItemClassConfiguration()
		{
			MappingConfiguration<NewItem> configuration = new MappingConfiguration<NewItem>();
			configuration.MapType(x => new { }).Inheritance(InheritanceStrategy.Vertical);
            configuration.HasDiscriminatorValue("ContextApi.Model.NewItem");

			return configuration;
		}
	
		public void PrepareNewItemPropertyConfigurations(MappingConfiguration<NewItem> configuration)
		{
			configuration.HasProperty(x => x.StartTime).HasFieldName("_startTime");
			configuration.HasProperty(x => x.ReadyFor).HasFieldName("_readyFor");
		}
		public MappingConfiguration<Bug> GetBugMappingConfiguration()
		{
			MappingConfiguration<Bug> configuration = this.GetBugClassConfiguration();
			this.PrepareBugPropertyConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<Bug> GetBugClassConfiguration()
		{
			MappingConfiguration<Bug> configuration = new MappingConfiguration<Bug>();
			configuration.MapType(x => new { }).Inheritance(InheritanceStrategy.Vertical);
            configuration.HasDiscriminatorValue("ContextApi.Model.Bug");

			return configuration;
		}
	
		public void PrepareBugPropertyConfigurations(MappingConfiguration<Bug> configuration)
		{
			configuration.HasProperty(x => x.Impact).HasFieldName("_impact");
			configuration.HasProperty(x => x.Regression).HasFieldName("_regression");
		}
	}
}
#pragma warning restore 1591
